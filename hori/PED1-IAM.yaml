AWSTemplateFormatVersion: 2010-09-09

Description: >
  Phase:  PED Ph1
  AWS Resources:  IAM Group, IAM Policy, IAM Role, IAM User

Parameters:
  ProjectName:
    Description: ProjectName
    Type: String
    Default: PED1

  Group01IAMUser01Secret:
    Description: Group01 IAMUser01 Secret
    Type: String
    Default: R<p-9=vry%hsXbq

  Group01IAMUser02Secret:
    Description: Group01 IAMUser02 Secret
    Type: String
    Default: 3-%NyP>gStpH2/G

  Group01IAMUser03Secret:
    Description: Group01 IAMUser03 Secret
    Type: String
    Default: p#JcKw2y@enC*+i

  Group01IAMUser04Secret:
    Description: Group01 IAMUser04 Secret
    Type: String
    Default: K#m8VsDaiS%2Qh?

  Group01IAMUser05Secret:
    Description: Group01 IAMUser05 Secret
    Type: String
    Default: pTew+yka>7L_jX4

  Group02IAMUser01Secret:
    Description: Group02 IAMUser01 Secret
    Type: String
    Default: W*qV7SUFXDgcPwk

Mappings:
  Param:
    PublicIPs:
      GIP01:                        210.148.59.64/28
      GIP02:                        138.212.252.110/32
      GIP03:                        153.149.107.20/32

    IAMGroup:
      IAMGroup01Name:               IMG_TIS
      IAMGroup02Name:               IMG_ASK

    IAMPolicy:
      IAMGroupPolicy01Name:         IMP-MFA
      IAMGroupPolicy02Name:         IMP-SourceIp
      IAMLMDPolicy01Name:           IMP-PWD
      
    IAMRole:
      IAMRole01Name:                IMR-Administrator
      IAMRole02Name:                IMR-ReadOnly
      LMDIAMRole01Name:             IMR-LMDPWD

    IAMUser:
      Group01IAMUser01:             TISUser01
      Group01IAMUser02:             TISUser02
      Group01IAMUser03:             TISUser03
      Group01IAMUser04:             TISUser04
      Group01IAMUser05:             TISUser05
      Group02IAMUser01:             ASKUser01

    LMD:
      LMDName:                      LMD-PWDPolicy

    PasswordPolicy:
      MaxPasswordAge:               90
      MinimumPasswordLength:        15
      RequireLowercaseCharacters:   True
      RequireNumbers:               True
      RequireSymbols:               True
      RequireUppercaseCharacters:   True
      PasswordReusePrevention:      3
      


Resources:
#--------------------------------------------------
# IAM Group
#--------------------------------------------------

  IAMGroup01:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMGroup, IAMGroup01Name ] ] ]

  IAMGroup02:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMGroup, IAMGroup02Name ] ] ]

#--------------------------------------------------
# - Policy
#--------------------------------------------------
  IAMGroupPolicy01:
    Type: AWS::IAM::Policy
    DeletionPolicy: Delete
    Properties:
      PolicyName: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMPolicy, IAMGroupPolicy01Name ] ] ]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
            - 'iam:List*'
            Resource: '*'
          - Effect: 'Allow'
            Action:
              - 'iam:GetLoginProfile'
              - 'iam:ChangePassword'
              - 'iam:CreateVirtualMFADevice'
              - 'iam:DeleteVirtualMFADevice'
              - 'iam:EnableMFADevice'
            Resource: 
              - !Sub 'arn:aws:iam::${AWS::AccountId}:mfa/${!aws:username}'
              - !Sub 'arn:aws:iam::${AWS::AccountId}:user/${!aws:username}'
          - Effect: 'Allow'
            Action:
              - 'am:DeactivateMFADevice'
            Resource:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:mfa/${!aws:username}'
              - !Sub 'arn:aws:iam::${AWS::AccountId}:user/${!aws:username}'
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: true
      Groups:
        - !Ref IAMGroup01
        - !Ref IAMGroup02
    

  IAMGroupPolicy02:
    Type: AWS::IAM::Policy
    DeletionPolicy: Delete
    Properties:
      PolicyName: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMPolicy, IAMGroupPolicy02Name ] ] ]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Deny'
            Action: '*'
            Resource: '*'
            Condition:
              NotIpAddress:
                aws:SourceIp:
                  - !FindInMap [ Param, PublicIPs, GIP01 ]
                  - !FindInMap [ Param, PublicIPs, GIP02 ]
                  - !FindInMap [ Param, PublicIPs, GIP03 ]
      Groups:
        - !Ref IAMGroup01
        - !Ref IAMGroup02


  LMDIAMPolicy:
    Type: AWS::IAM::Policy
    DeletionPolicy: Delete
    Properties:
      PolicyName: 
        !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMPolicy, IAMLMDPolicy01Name ] ] ]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: !Join [ '', [ 'arn:aws:logs:ap-northeast-1:', !Sub '${AWS::AccountId}',':*' ] ]
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Join [ '', [ 'arn:aws:logs:ap-northeast-1:', !Sub '${AWS::AccountId}', ':log-group:/aws/lambda/', !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, LMD, LMDName ] ] ],':*'] ]
          - Effect: Allow
            Action:
              - iam:UpdateAccountPasswordPolicy
            Resource: '*'
      Roles:
        - !Ref LMDIAMRole01

#--------------------------------------------------
# IAM Role
#--------------------------------------------------
  IAMRole01:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMRole, IAMRole01Name ] ] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt Group01IAMUser01.Arn
                - !GetAtt Group01IAMUser02.Arn
                - !GetAtt Group01IAMUser03.Arn
                - !GetAtt Group01IAMUser04.Arn
                - !GetAtt Group01IAMUser05.Arn
            Action: 'sts:AssumeRole'
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: true
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  IAMRole02:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMRole, IAMRole02Name ] ] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt Group01IAMUser01.Arn
                - !GetAtt Group01IAMUser02.Arn
                - !GetAtt Group01IAMUser03.Arn
                - !GetAtt Group01IAMUser04.Arn
                - !GetAtt Group01IAMUser05.Arn
                - !GetAtt Group02IAMUser01.Arn
            Action: 'sts:AssumeRole'
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: true
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/ReadOnlyAccess'

  LMDIAMRole01:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      RoleName: 
        !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMRole, LMDIAMRole01Name ] ] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole


#--------------------------------------------------
# IAM User
#--------------------------------------------------

  Group01IAMUser01:
    Type: 'AWS::IAM::User'
    Properties:
      LoginProfile:
        Password: !Ref Group01IAMUser01Secret
        PasswordResetRequired: true
      UserName: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMUser, Group01IAMUser01 ] ] ]
      
  Group01IAMUser02:
    Type: 'AWS::IAM::User'
    Properties:
      LoginProfile:
        Password: !Ref Group01IAMUser02Secret
        PasswordResetRequired: true
      UserName: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMUser, Group01IAMUser02 ] ] ]

  Group01IAMUser03:
    Type: 'AWS::IAM::User'
    Properties:
      LoginProfile:
        Password: !Ref Group01IAMUser03Secret
        PasswordResetRequired: true
      UserName: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMUser, Group01IAMUser03 ] ] ]
  
  Group01IAMUser04:
    Type: 'AWS::IAM::User'
    Properties:
      LoginProfile:
        Password: !Ref Group01IAMUser04Secret
        PasswordResetRequired: true
      UserName: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMUser, Group01IAMUser04 ] ] ]
  
  Group01IAMUser05:
    Type: 'AWS::IAM::User'
    Properties:
      LoginProfile:
        Password: !Ref Group01IAMUser05Secret
        PasswordResetRequired: true
      UserName: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMUser, Group01IAMUser05 ] ] ]

  Group02IAMUser01:
    Type: 'AWS::IAM::User'
    Properties:
      LoginProfile:
        Password: !Ref Group02IAMUser01Secret
        PasswordResetRequired: true
      UserName: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMUser, Group02IAMUser01 ] ] ]

#--------------------------------------------------
#IAM Group Addition
#--------------------------------------------------
  Group01IAMUserToGroupAddition:
    Type: 'AWS::IAM::UserToGroupAddition'
    Properties:
      GroupName: !Ref IAMGroup01
      Users:
        - !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMUser,Group01IAMUser01 ] ] ]
        - !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMUser,Group01IAMUser02 ] ] ]
        - !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMUser,Group01IAMUser03 ] ] ]
        - !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMUser,Group01IAMUser04 ] ] ]
        - !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMUser,Group01IAMUser05 ] ] ]
        
  Group02IAMUserToGroupAddition:
    Type: 'AWS::IAM::UserToGroupAddition'
    Properties:
      GroupName: !Ref IAMGroup02
      Users:
        - !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMUser,Group02IAMUser01 ] ] ]


#------------------------------------------------------------#
#Lambda Function
#------------------------------------------------------------#

  CustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt LMD01.Arn

  LMD01:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      FunctionName:
        !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, LMD, LMDName ] ] ]
      Runtime: python3.7
      Timeout: 240
      Description:
        !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, LMD, LMDName ] ] ]
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import os

          def lambda_handler(event, context):
            client = boto3.client('iam')
            response = client.update_account_password_policy(
                MaxPasswordAge=int(os.environ['MAX_PASSWORD_AGE']),
                MinimumPasswordLength=int(os.environ['MIN_PASSWORD_LENGTH']),
                RequireLowercaseCharacters=bool(os.environ['REQUIRE_LOW_CHAR']),
                RequireNumbers=bool(os.environ['REQUIRE_NUM']),
                RequireSymbols=bool(os.environ['REQUIRE_SYMBOL']),
                RequireUppercaseCharacters=bool(os.environ['REQUIRE_UPPER_CHAR']),
                PasswordReusePrevention=int(os.environ['PASSWORD_REUSE_PREVENTION']))
            cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
            return (True, response)
      Environment:
        Variables:
          MAX_PASSWORD_AGE:
            !FindInMap [ Param, PasswordPolicy, MaxPasswordAge ]
          MIN_PASSWORD_LENGTH:
            !FindInMap [ Param, PasswordPolicy, MinimumPasswordLength ]
          REQUIRE_LOW_CHAR:
            !FindInMap [ Param, PasswordPolicy, RequireLowercaseCharacters ]
          REQUIRE_NUM:
            !FindInMap [ Param, PasswordPolicy, RequireNumbers ]
          REQUIRE_SYMBOL:
            !FindInMap [ Param, PasswordPolicy, RequireSymbols ]
          REQUIRE_UPPER_CHAR:
            !FindInMap [ Param, PasswordPolicy, RequireUppercaseCharacters ]
          PASSWORD_REUSE_PREVENTION:
            !FindInMap [ Param, PasswordPolicy, PasswordReusePrevention ]
      Role: 
        !GetAtt LMDIAMRole01.Arn

        

Outputs:
  outputGroup01IAMUser01:
    Value: !Ref Group01IAMUser01Secret
    Export:
      Name: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMUser, Group01IAMUser01 ] ] ]
  outputGroup01IAMUser02:
    Value: !Ref Group01IAMUser02Secret
    Export:
      Name: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMUser, Group01IAMUser02 ] ] ]
  outputGroup01IAMUser03:
    Value: !Ref Group01IAMUser03Secret
    Export:
      Name: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMUser, Group01IAMUser03 ] ] ]
  outputGroup01IAMUser04:
    Value: !Ref Group01IAMUser04Secret
    Export:
      Name: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMUser, Group01IAMUser04 ] ] ]
  outputGroup01IAMUser05:
    Value: !Ref Group01IAMUser05Secret
    Export:
      Name: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMUser, Group01IAMUser05 ] ] ]
  outputGroup02IAMUser01:
    Value: !Ref Group02IAMUser01Secret
    Export:
      Name: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, IAMUser, Group02IAMUser01 ] ] ]