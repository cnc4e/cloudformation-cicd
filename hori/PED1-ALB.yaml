AWSTemplateFormatVersion: 2010-09-09

Description: >
  Phase:  PED Ph1
  AWS Resources:   S3, CloudTrail, Route53, CertificateManager, ALB, SecurityGroup

Parameters:
  ProjectName:
    Description: ProjectName
    Type: String
    Default: PED1

  ProjectNameForS3:
    Description: ProjectName For S3 Bucket Name
    Type: String
    Default: ped1

  DomainName:
    Description: DomainName
    Type: String
    Default: ped1bc.com

Mappings:
  Param:
    S3Bucket:
      S3BucketName:                 s3-maintain-bucket
      S3BucketTagName:              S3-Maintain-Bucket

    S3Variable:
      AccessControl:                LogDeliveryWrite 
      Id:                           LifeCycle
      ExpirationInDays:             365

    CloudTrail:
      Prefix:                       cloudtrail
      CloudTarilS3Name:             S3-CloudTrail

    Record:
      EC203Record:                  EC2-Observer
      EC204Record:                  EC2-Anode
      EC205Record:                  EC2-Bnode
      EC206Record:                  EC2-Cnode

    CertificateManager:
      CertificateManagerName:       ACM

    ALB:
      ALBName:                      ALB

    ALBTargetGroup:
      ALBTargetGroupEC203Name:      ALB-TGObserver
      ALBTargetGroupEC204Name:      ALB-TGAnode
      ALBTargetGroupEC205Name:      ALB-TGBNode
      ALBTargetGroupEC206Name:      ALB-TGCNode

    ALBVariable:
      Type:                         application
      Scheme:                       internet-facing
      AccessLogsEnabled:            true
      Prefix:                       alb

    ALBTargetGroupVariable:
      Targetport:                   80
      Protocol:                     HTTP
      TargetType:                   instance

    ALBListener01Variable:
      Listenport:                   443
      Protocol:                     HTTPS

    ALBListener02Variable:
      Listenport:                   80
      Protocol:                     HTTP

    PublicIPs:
      GIP01:                        210.148.59.64/28
      GIP02:                        138.212.252.110/32
      GIP03:                        153.149.107.20/32
    
    PrivateIPs:
      SUBPRI01EC2IPRange:           192.168.1.8/29

  Import:
    VPC:
      VPCId:                        VPC-ID

    Subnet:
      SUBPUB01Id:                   SUB-PUB1A-ID
      SUBPUB02Id:                   SUB-PUB1C-ID

    EC2:
      EC203Id:                      EC2Observer-ID
      EC204Id:                      EC2ANode-ID
      EC205Id:                      EC2BNode-ID
      EC206Id:                      EC2CNode-ID
    
    SecurityGroup:
      ALBSecurityGroup:             SGR-ALB-ID

Resources:
#--------------------------------------------------
# - S3
#--------------------------------------------------
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [ '-', [ !Ref ProjectNameForS3, !FindInMap [ Param, S3Bucket, S3BucketName ] ] ]
      AccessControl: !FindInMap [ Param, S3Variable, AccessControl ] 
      LifecycleConfiguration:
        Rules:
          - Id: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, S3Variable, Id ] ] ]
            Status: Enabled
            ExpirationInDays: !FindInMap [ Param, S3Variable, ExpirationInDays ]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
      - Key: Name
        Value: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, S3Bucket, S3BucketTagName ] ] ]

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Sid: AWSConsoleStmt
            Effect: Allow
            Principal:
              AWS: arn:aws:iam::582318560864:root
            Action: s3:PutObject
            Resource: !Join
              -  ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - '/'
                - !FindInMap [ Param, ALBVariable, Prefix ]
                - /AWSLogs
                - !Sub '${AWS::AccountId}'
                - /*
          -
            Sid: AWSLogDeliveryWrite
            Effect: Allow 
            Principal:
              Service:
                - delivery.logs.amazonaws.com
            Action: s3:PutObject
            Resource: !Join
              -  ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - '/'
                - !FindInMap [ Param, ALBVariable, Prefix ]
                - /AWSLogs
                - !Sub '${AWS::AccountId}'
                - /*
            Condition: 
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
          -
            Sid: AWSLogDeliveryAclCheck
            Effect: Allow
            Principal:
              Service:
                - delivery.logs.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt S3Bucket.Arn
          -
            Effect: Allow
            Principal:
              AWS: arn:aws:iam::582318560864:root
            Action: s3:PutObject
            Resource: !Join
              -  ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - /*
          - 
            Sid: AWSCloudTrailAclCheck
            Principal:
              Service: 'cloudtrail.amazonaws.com'
            Effect: Allow
            Action: s3:GetBucketAcl
            Resource: !GetAtt S3Bucket.Arn
          - 
            Sid: AWSCloudTrailWrite
            Principal:
              Service: 'cloudtrail.amazonaws.com'
            Effect: Allow
            Action: s3:PutObject
            Resource: 
              !Join [ '', [ !GetAtt S3Bucket.Arn, '/', !FindInMap [ Param, CloudTrail, Prefix ], '/AWSLogs/', !Ref AWS::AccountId, '/*'] ] 
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control

#--------------------------------------------------
# CloudTrail
#--------------------------------------------------
  CloudTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn: S3BucketPolicy
    Properties:      
      S3BucketName: !Ref S3Bucket
      S3KeyPrefix: !FindInMap [ Param, CloudTrail, Prefix ]
      IsLogging: true
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, CloudTrail, CloudTarilS3Name ] ] ]

#--------------------------------------------------
# - Route 53
#-------------------------------------------------- 
# ---HostZone--------------
  HostZone:
    Type: AWS::Route53::HostedZone
    Properties:
        Name:  !Ref DomainName

# ---Record----------------
  DNSRecord01:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join [ '', [ !Ref DomainName,'.' ] ]
      Name: !Join [ '', [ !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, Record, EC203Record ] ] ], '.', !Ref DomainName, '.' ] ]
      Type: A
      AliasTarget: 
        DNSName: !GetAtt ALB.DNSName
        HostedZoneId: !GetAtt ALB.CanonicalHostedZoneID
    DependsOn: HostZone

  DNSRecord02:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join [ '', [ !Ref DomainName, '.' ] ]
      Name: !Join [ '', [ !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, Record, EC204Record] ] ] , '.', !Ref DomainName,  '.' ] ]
      Type: A
      AliasTarget: 
        DNSName: !GetAtt ALB.DNSName
        HostedZoneId: !GetAtt ALB.CanonicalHostedZoneID
    DependsOn: HostZone

  DNSRecord03:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join [ '', [ !Ref DomainName, '.' ] ]
      Name: !Join [ '', [ !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, Record, EC205Record ] ] ], '.', !Ref DomainName, ] ]
      Type: A
      AliasTarget: 
        DNSName: !GetAtt ALB.DNSName
        HostedZoneId: !GetAtt ALB.CanonicalHostedZoneID
    DependsOn: HostZone

  DNSRecord04:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join [ '', [ !Ref DomainName, '.' ] ]
      Name: !Join [ '', [ !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, Record, EC206Record ] ] ], '.', !Ref DomainName, ] ]
      Type: A
      AliasTarget: 
        DNSName: !GetAtt ALB.DNSName
        HostedZoneId: !GetAtt ALB.CanonicalHostedZoneID
    DependsOn: HostZone

#--------------------------------------------------
# - CertificateManager
#-------------------------------------------------- 
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties: 
      DomainName: 
        !Join [ '', [ '*.' , !Ref DomainName ] ]
      DomainValidationOptions:
          - DomainName: 
              !Join [ '', [ '*.' , !Ref DomainName ] ]
            HostedZoneId: !Ref HostZone
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, CertificateManager, CertificateManagerName ] ] ]
      ValidationMethod: DNS

#--------------------------------------------------
# - Application Load Balancer(ALB)
#--------------------------------------------------

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
        - S3BucketPolicy
    Properties:
      Type: !FindInMap [ Param, ALBVariable, Type ]
      Name: 
        !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, ALB, ALBName ] ] ]
      Scheme: !FindInMap [ Param, ALBVariable, Scheme ]
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: !FindInMap [ Param, ALBVariable, AccessLogsEnabled ]
        - Key: access_logs.s3.bucket
          Value:
            !Ref S3Bucket
        - Key: access_logs.s3.prefix
          Value: !FindInMap [ Param, ALBVariable, Prefix ]
      Subnets:
        - Fn::ImportValue: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Import, Subnet, SUBPUB01Id ] ] ]
        - Fn::ImportValue: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Import, Subnet, SUBPUB02Id ] ] ]
      SecurityGroups:
        - Fn::ImportValue: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Import, SecurityGroup, ALBSecurityGroup ] ] ]
      Tags:
      - Key: Name
        Value: 
          !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, ALB, ALBName ] ] ]

  ALBTargetGroup01:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, ALBTargetGroup, ALBTargetGroupEC203Name ] ] ]
      Port: !FindInMap [ Param, ALBTargetGroupVariable, Targetport ]
      Protocol:  !FindInMap [ Param, ALBTargetGroupVariable, Protocol ]
      TargetType:  !FindInMap [ Param, ALBTargetGroupVariable, TargetType ]
      Targets:
        - Id:
            Fn::ImportValue: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Import, EC2, EC203Id ] ] ]
      VpcId:
        Fn::ImportValue: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Import, VPC, VPCId ] ] ]
      Tags:
      - Key: Name
        Value: 
          !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, ALBTargetGroup, ALBTargetGroupEC203Name ] ] ]

  ALBTargetGroup02:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, ALBTargetGroup, ALBTargetGroupEC204Name ] ] ]
      Port: !FindInMap [ Param, ALBTargetGroupVariable, Targetport ]
      Protocol:  !FindInMap [ Param, ALBTargetGroupVariable, Protocol ]
      TargetType:  !FindInMap [ Param, ALBTargetGroupVariable, TargetType ]
      Targets:
        - Id:
            Fn::ImportValue:  !Join [ '-', [ !Ref ProjectName, !FindInMap [ Import, EC2, EC204Id ] ] ]
      VpcId:
        Fn::ImportValue: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Import, VPC, VPCId ] ] ]
      Tags:
      - Key: Name
        Value: 
          !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, ALBTargetGroup, ALBTargetGroupEC204Name ] ] ]
    
  ALBTargetGroup03:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, ALBTargetGroup, ALBTargetGroupEC205Name ] ] ]
      Port: !FindInMap [ Param, ALBTargetGroupVariable, Targetport ]
      Protocol:  !FindInMap [ Param, ALBTargetGroupVariable, Protocol ]
      TargetType:  !FindInMap [ Param, ALBTargetGroupVariable, TargetType ]
      Targets:
        - Id:
            Fn::ImportValue: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Import, EC2, EC205Id ] ] ]
      VpcId:
        Fn::ImportValue: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Import, VPC, VPCId ] ] ]
      Tags:
      - Key: Name
        Value: 
          !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, ALBTargetGroup, ALBTargetGroupEC205Name ] ] ]

  ALBTargetGroup04:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, ALBTargetGroup, ALBTargetGroupEC206Name ] ] ]
      Port: !FindInMap [ Param, ALBTargetGroupVariable, Targetport ]
      Protocol:  !FindInMap [ Param, ALBTargetGroupVariable, Protocol ]
      TargetType:  !FindInMap [ Param, ALBTargetGroupVariable, TargetType ]
      Targets:
        - Id:
            Fn::ImportValue: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Import, EC2, EC206Id ] ] ]
      VpcId:
        Fn::ImportValue: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Import, VPC, VPCId ] ] ]
      Tags:
      - Key: Name
        Value: 
          !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, ALBTargetGroup, ALBTargetGroupEC206Name ] ] ]

  ALBListener01:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref Certificate
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
                StatusCode: '403'
      LoadBalancerArn: !Ref ALB
      Port: !FindInMap [ Param, ALBListener01Variable, Listenport ]
      Protocol: !FindInMap [ Param, ALBListener01Variable, Protocol ]

  ALBListener01Rule01:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Conditions:
        - Field: source-ip
          SourceIpConfig:
            Values:
              - !FindInMap [ Param, PublicIPs, GIP01 ]
              - !FindInMap [ Param, PublicIPs, GIP02 ]
              - !FindInMap [ Param, PublicIPs, GIP03 ]
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Join [ '.', [ !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, Record, EC203Record ] ] ], !Ref DomainName ] ]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup01
      ListenerArn: !Ref ALBListener01
      Priority: 1
  
  ALBListener01Rule02:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Conditions:
        - Field: source-ip
          SourceIpConfig:
            Values:
              - !FindInMap [ Param, PublicIPs, GIP01 ]
              - !FindInMap [ Param, PublicIPs, GIP02 ]
              - !FindInMap [ Param, PublicIPs, GIP03 ]
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Join [ '.', [ !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, Record, EC204Record ] ] ], !Ref DomainName ] ]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup02
      ListenerArn: !Ref ALBListener01
      Priority: 2

  ALBListener01Rule03:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Conditions:
        - Field: source-ip
          SourceIpConfig:
            Values:
              - !FindInMap [ Param, PublicIPs, GIP01 ]
              - !FindInMap [ Param, PublicIPs, GIP02 ]
              - !FindInMap [ Param, PublicIPs, GIP03 ]
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Join [ '.', [ !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, Record, EC205Record ] ] ], !Ref DomainName ] ]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup03
      ListenerArn: !Ref ALBListener01
      Priority: 3

  ALBListener01Rule04:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Conditions:
        - Field: source-ip
          SourceIpConfig:
            Values:
              - !FindInMap [ Param, PublicIPs, GIP01 ]
              - !FindInMap [ Param, PublicIPs, GIP02 ]
              - !FindInMap [ Param, PublicIPs, GIP03 ]
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Join [ '.', [ !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, Record, EC206Record ] ] ], !Ref DomainName ] ]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup04
      ListenerArn: !Ref ALBListener01
      Priority: 4


  ALBListener02:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
                StatusCode: '403'
      LoadBalancerArn: !Ref ALB
      Port: !FindInMap [ Param, ALBListener02Variable, Listenport ]
      Protocol: !FindInMap [ Param, ALBListener02Variable, Protocol ]

  ALBListener02Rule01:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Conditions:
        - Field: source-ip
          SourceIpConfig:
            Values:
              - !FindInMap [ Param, PublicIPs, GIP01 ]
              - !FindInMap [ Param, PublicIPs, GIP02 ]
              - !FindInMap [ Param, PublicIPs, GIP03 ]
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Join [ '.', [ !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, Record, EC203Record ] ] ], !Ref DomainName ] ]
      Actions:
        - Type: redirect
          RedirectConfig:
            StatusCode: 'HTTP_301'
            Host: '#{host}'
            Path: '/#{path}'
            Port: '443'
            Protocol: HTTPS
            Query: '#{query}'
      ListenerArn: !Ref ALBListener02
      Priority: 1

  ALBListener02Rule02:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Conditions:
        - Field: source-ip
          SourceIpConfig:
            Values:
              - !FindInMap [ Param, PublicIPs, GIP01 ]
              - !FindInMap [ Param, PublicIPs, GIP02 ]
              - !FindInMap [ Param, PublicIPs, GIP03 ]
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Join [ '.', [ !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, Record, EC204Record ] ] ], !Ref DomainName ] ]
      Actions:
        - Type: redirect
          RedirectConfig:
            StatusCode: 'HTTP_301'
            Host: '#{host}'
            Path: '/#{path}'
            Port: '443'
            Protocol: HTTPS
            Query: '#{query}'
      ListenerArn: !Ref ALBListener02
      Priority: 2

  ALBListener02Rule03:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Conditions:
        - Field: source-ip
          SourceIpConfig:
            Values:
              - !FindInMap [ Param, PublicIPs, GIP01 ]
              - !FindInMap [ Param, PublicIPs, GIP02 ]
              - !FindInMap [ Param, PublicIPs, GIP03 ]
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Join [ '.', [ !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, Record, EC205Record ] ] ], !Ref DomainName ] ]
      Actions:
        - Type: redirect
          RedirectConfig:
            StatusCode: 'HTTP_301'
            Host: '#{host}'
            Path: '/#{path}'
            Port: '443'
            Protocol: HTTPS
            Query: '#{query}'
      ListenerArn: !Ref ALBListener02
      Priority: 3

  ALBListener02Rule04:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Conditions:
        - Field: source-ip
          SourceIpConfig:
            Values:
              - !FindInMap [ Param, PublicIPs, GIP01 ]
              - !FindInMap [ Param, PublicIPs, GIP02 ]
              - !FindInMap [ Param, PublicIPs, GIP03 ]
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Join [ '.', [ !Join [ '-', [ !Ref ProjectName, !FindInMap [ Param, Record, EC206Record ] ] ], !Ref DomainName ] ]
      Actions:
        - Type: redirect
          RedirectConfig:
            StatusCode: 'HTTP_301'
            Host: '#{host}'
            Path: '/#{path}'
            Port: '443'
            Protocol: HTTPS
            Query: '#{query}'
      ListenerArn: !Ref ALBListener02
      Priority: 4

#--------------------------------------------------
# - SecurityGroup
#--------------------------------------------------
  # ALBSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupName: !FindInMap [ Param, SecurityGroup, ALBSecurityGroupName ]
  #     GroupDescription: for ALB
  #     VpcId: 
  #       Fn::ImportValue: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Import, VPC, VPCId]
  #     Tags:
  #       - Key: Name
  #         Value: !FindInMap [ Param, SecurityGroup, ALBSecurityGroupName ]

  ALBSecurityGroupIngress01:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Fn::ImportValue: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Import, SecurityGroup, ALBSecurityGroup ] ] ]
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: !FindInMap [ Param, PublicIPs, GIP02 ]
      Description: from AKGIP

  ALBSecurityGroupIngress02:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Fn::ImportValue: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Import, SecurityGroup, ALBSecurityGroup ] ] ]
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: !FindInMap [ Param, PublicIPs, GIP03 ]
      Description: from AKGIP

  ALBSecurityGroupIngress03:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Fn::ImportValue: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Import, SecurityGroup, ALBSecurityGroup ] ] ]
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: !FindInMap [ Param, PublicIPs, GIP01 ]
      Description: from TISGIP

  ALBSecurityGroupIngress04:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Fn::ImportValue: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Import, SecurityGroup, ALBSecurityGroup ] ] ]
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !FindInMap [ Param, PublicIPs, GIP02 ]
      Description: from AKGIP

  ALBSecurityGroupIngress05:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Fn::ImportValue: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Import, SecurityGroup, ALBSecurityGroup ] ] ]
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !FindInMap [ Param, PublicIPs, GIP03 ]
      Description: from AKGIP

  ALBSecurityGroupIngress06:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Fn::ImportValue: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Import, SecurityGroup, ALBSecurityGroup ] ] ]
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !FindInMap [ Param, PublicIPs, GIP01 ]
      Description: from TISGIP

  ALBSecurityGroupEgress01:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: 
        Fn::ImportValue: !Join [ '-', [ !Ref ProjectName, !FindInMap [ Import, SecurityGroup, ALBSecurityGroup ] ] ]
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: !FindInMap [ Param, PrivateIPs, SUBPRI01EC2IPRange ]
      Description: to Private Subnet EC2

